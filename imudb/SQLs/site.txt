CREATE TABLE site (
    site_id VARCHAR(30) PRIMARY KEY,
    site_name VARCHAR(255) NOT NULL,
    address TEXT NOT NULL,
    district VARCHAR(100),
    latitude NUMERIC(9, 6),
    longitude NUMERIC(9, 6),
    geom GEOMETRY(Point, 4326),

    site_type VARCHAR(50),
    tower_type VARCHAR(50),
    tower_height NUMERIC,
    building_height NUMERIC,

    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW(),
    created_by UUID DEFAULT auth.uid(),
    updated_by UUID
);


CREATE TABLE site_landowner (
    site_id VARCHAR(30) PRIMARY KEY REFERENCES site(site_id) ON DELETE CASCADE,
    land_owner VARCHAR(255),
    land_owner_contact VARCHAR(30),
    key_information VARCHAR(30)
);

CREATE TABLE site_configuration (
    site_id VARCHAR(30) PRIMARY KEY REFERENCES site(site_id) ON DELETE CASCADE,
    band_2g VARCHAR(20),
    band_3g VARCHAR(20),
    band_4g VARCHAR(20),
    config_5g VARCHAR(20),
    config_2g VARCHAR(15),
    config_3g VARCHAR(15),
    config_4g VARCHAR(15)
);

CREATE TABLE site_power (
    site_id VARCHAR(30) PRIMARY KEY REFERENCES site(site_id) ON DELETE CASCADE,
    tf VARCHAR(50),
    supply_phase VARCHAR(50),
    generator BOOLEAN,
    kva_of_dg INT,
    nea_subscriber_details VARCHAR(30),
    meter_box_mcb_rating NUMERIC,
    meter_power_rating NUMERIC,
    power_plant_company VARCHAR(50),
    modules_installed INT,
    modules_operational INT,
    battery_banks NUMERIC,
    total_battery_capacity NUMERIC,
    battery_installation_date DATE,
    battery_bank_company VARCHAR(50),
    rectifier_capacity NUMERIC,
    load_current NUMERIC
);

CREATE TABLE site_nea (
    site_id VARCHAR(30) PRIMARY KEY REFERENCES site(site_id) ON DELETE CASCADE,
    nea_office VARCHAR(255),
    nea_office_contact VARCHAR(30),
    nea_field_person VARCHAR(255),
    nea_field_contact VARCHAR(30)
);

CREATE TABLE site_transmission (
    site_id VARCHAR(30) PRIMARY KEY REFERENCES site(site_id) ON DELETE CASCADE,
    transmission_link VARCHAR(50),
    transmission_device VARCHAR(50),
    transmission_l2 VARCHAR(255),
    transmission_l3 VARCHAR(255),
    l3_aggregation VARCHAR(255),
    radio_parent VARCHAR(30),
    microwave_type VARCHAR(50),
    microwave_capacity INT,
    microwave_antenna_size INT
);

CREATE TABLE site_images (
    site_id VARCHAR(30) PRIMARY KEY REFERENCES site(site_id) ON DELETE CASCADE,
    image1_path VARCHAR(255),
    image2_path VARCHAR(255),
    image3_path VARCHAR(255)
);






-- Add FOREIGN KEY constraint for created_by
ALTER TABLE site
ADD CONSTRAINT fk_created_by_user
FOREIGN KEY (created_by) REFERENCES public.user_profiles(user_id)
ON DELETE SET NULL
ON UPDATE CASCADE;

-- Add FOREIGN KEY constraint for updated_by
ALTER TABLE site
ADD CONSTRAINT fk_updated_by_user
FOREIGN KEY (updated_by) REFERENCES public.user_profiles(user_id)
ON DELETE SET NULL -- If the user is deleted, set updated_by to NULL
ON UPDATE CASCADE; -- If the user_id in user_profiles changes, update it here too

-- Function to update geometry from latitude and longitude
CREATE OR REPLACE FUNCTION update_sites_geom_from_latlon()
RETURNS TRIGGER AS $$
BEGIN
    IF NEW.longitude IS NOT NULL AND NEW.latitude IS NOT NULL THEN
        NEW.geom = ST_SetSRID(ST_MakePoint(NEW.longitude, NEW.latitude), 4326);
    ELSE
        NEW.geom = NULL;
    END IF;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Trigger to automatically update geom column
CREATE TRIGGER trigger_update_sites_geom
BEFORE INSERT OR UPDATE ON site
FOR EACH ROW
WHEN (pg_trigger_depth() = 0)
EXECUTE FUNCTION update_sites_geom_from_latlon();

-- Function to automatically update the updated_at timestamp and updated_by user
CREATE OR REPLACE FUNCTION trigger_update_metadata()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = NOW();
  NEW.updated_by = auth.uid(); -- Set the user who performed the update
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Trigger to execute the metadata update function before an update operation
CREATE TRIGGER set_metadata_trigger_site
BEFORE UPDATE ON site
FOR EACH ROW
EXECUTE FUNCTION trigger_update_metadata(); -- Renamed from trigger_set_timestamp

-- Spatial index for efficient querying on the geom column
CREATE INDEX IF NOT EXISTS idx_sites_geom ON site USING GIST (geom);

-- Optional: Index on created_by for faster lookups
CREATE INDEX IF NOT EXISTS idx_sites_created_by ON site (created_by);

-- Optional: Index on updated_by for faster lookups
CREATE INDEX IF NOT EXISTS idx_sites_updated_by ON site (updated_by);

-- Note: The 'user_profiles' table and 'user_id' column are assumed.
-- Ensure your 'public.user_profiles' table with 'user_id' (UUID) exists.
-- If your user table is directly auth.users, adjust foreign keys to reference auth.users(id).
