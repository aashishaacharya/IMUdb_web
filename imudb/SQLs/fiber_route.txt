-- Drop existing table if needed
-- DROP TABLE IF EXISTS fiber_routes CASCADE;

CREATE TABLE fiber_routes (
    route_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    name TEXT NOT NULL, -- Will be auto-generated by trigger
    description TEXT,
    parent_route_id UUID REFERENCES fiber_routes(route_id) ON DELETE SET NULL, -- For hierarchy

    -- Endpoints referencing site table
    start_site_id VARCHAR(30) NOT NULL REFERENCES site(site_id) ON DELETE RESTRICT,
    end_site_id VARCHAR(30) NOT NULL REFERENCES site(site_id) ON DELETE RESTRICT,

    -- Geometry and Length (Optional but Recommended)
    geom GEOMETRY(LineString, 4326), -- Geographic path (WGS 84)
    length_meters NUMERIC(10, 2),    -- Surveyed or calculated length

    -- Cable Properties
    fiber_cable_type TEXT,           -- e.g., 'SMF-G.652.D 96F'
    total_core_count INTEGER NOT NULL CHECK (total_core_count > 0),

    -- Lifecycle and References
    kml_kmz_url TEXT,

    -- General Notes and Metadata
    notes TEXT,
    created_by UUID REFERENCES user_profiles(user_id),
    created_at TIMESTAMPTZ DEFAULT now(),
    updated_at TIMESTAMPTZ DEFAULT now(),

    -- Constraints
    CONSTRAINT chk_site_order CHECK (start_site_id < end_site_id) -- Canonical order to avoid Aâ†”B duplicates
);

-- Enable RLS
ALTER TABLE fiber_routes ENABLE ROW LEVEL SECURITY;

-- Indexes
CREATE INDEX idx_fiber_routes_geom_gist ON fiber_routes USING GIST (geom) WHERE geom IS NOT NULL;
CREATE INDEX idx_fiber_routes_parent ON fiber_routes (parent_route_id);
CREATE INDEX idx_fiber_routes_start_site ON fiber_routes (start_site_id);
CREATE INDEX idx_fiber_routes_end_site ON fiber_routes (end_site_id);
CREATE INDEX idx_fiber_routes_name ON fiber_routes (name);

-- Trigger function to auto-update updated_at
CREATE OR REPLACE FUNCTION trigger_set_timestamp()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = NOW();
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER set_fiber_routes_timestamp
BEFORE UPDATE ON fiber_routes
FOR EACH ROW
EXECUTE FUNCTION trigger_set_timestamp();

-- Trigger function to auto-generate route name from site names
CREATE OR REPLACE FUNCTION generate_fiber_route_name()
RETURNS TRIGGER AS $$
DECLARE
    name_a TEXT;
    name_b TEXT;
    generated_name TEXT;
BEGIN
    SELECT site_name INTO name_a FROM site WHERE site_id = NEW.start_site_id;
    SELECT site_name INTO name_b FROM site WHERE site_id = NEW.end_site_id;

    IF name_a IS NULL OR name_b IS NULL THEN
        generated_name := 'Route-' || COALESCE(NEW.start_site_id, 'Unknown') || '-' || COALESCE(NEW.end_site_id, 'Unknown');
    ELSE
        IF name_a <= name_b THEN
            generated_name := name_a || '-' || name_b;
        ELSE
            generated_name := name_b || '-' || name_a;
        END IF;
    END IF;

    NEW.name := generated_name;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER set_fiber_route_name
BEFORE INSERT OR UPDATE ON fiber_routes
FOR EACH ROW
EXECUTE FUNCTION generate_fiber_route_name();
